[project]
name = "magali"
description = "Modeling and inversion of magnetic microscopy data"
dynamic = ["version"]
authors = [
  {name="The Magali Developers", email="fatiandoaterra@protonmail.com"},
]
maintainers = [
  {name = "Leonardo Uieda", email = "leo@uieda.com"},
]
readme = "README.md"
license = "BSD-3-Clause"
keywords = ["magnetism", "microscopy", "geophysics", "paleomagnetism"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.23",
    "scipy>=1.9",
    "numba>=0.58",
    "scikit-image>=0.20",
    "xarray>=2022.6.0",
    "harmonica>=0.7",
    "verde>=1.8.1",
    "choclo>=0.2.0",
]

[project.urls]
"Documentation" = "https://www.fatiando.org/magali"
"Changelog" = "https://www.fatiando.org/magali/latest/changes.html"
"Bug Tracker" = "https://github.com/fatiando/magali/issues"
"Source Code" = "https://github.com/fatiando/magali"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
version_scheme =  "post-release"
local_scheme =  "no-local-version"
write_to =  "src/magali/_version.py"

# Make sure isort and Black are compatible
[tool.isort]
profile = "black"
multi_line_output = 3

[tool.burocrata]
notice = '''
# Copyright (c) 2024 The Magali Developers.
# Distributed under the terms of the BSD 3-Clause License.
# SPDX-License-Identifier: BSD-3-Clause
#
# This code is part of the Fatiando a Terra project (https://www.fatiando.org)
#'''

[tool.ruff]
line-length = 88
exclude = [
    "doc/_build",
    "src/magali/_version.py",
]

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "D",        # pydocstyle
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "FURB",     # refurb
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "PYI",      # flake8-pyi
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "ISC001",   # Conflicts with formatter
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "RET504",   # allow variable assignment only for return
  "PT001",    # conventions for parenthesis on pytest.fixture
  "D200",     # allow single line docstrings in their own line
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # disable unused-imports errors on __init__.py
"test/**" = [
    "T20", # allow print statements in tests
    "D",   # ignore pydocstyle warnings in tests
]
"doc/conf.py" = ["D"]  # ignore pydocstyle warnings in Sphinx config

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.coverage.run]
source = ["magali"]
omit = [
    "**/_version.py",
    "**/__init__.py",
]
branch = true
# Needed to combine coverage data from multiple OSs on CI
relative_files = true

[tool.coverage.paths]
source = [
    "src/magali",
    "*/magali",
    "*\\magali",
]

[tool.coverage.report]
show_missing = true
